//
//  FilterDetailView.swift
//  ShutterLink
//
//  Created by Í∂åÏö∞ÏÑù on 5/26/25.
//

import SwiftUI

struct FilterDetailView: View {
    let filterId: String
    @StateObject private var viewModel = FilterDetailViewModel()
    @Environment(\.dismiss) private var dismiss
    @State private var hasAppeared = false
    @State private var showChatOuterView = false
    
    var body: some View {
        ZStack {
            Color.black
                .ignoresSafeArea()
            
            if let filterDetail = viewModel.filterDetail {
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: 24) {
                        // Ïù¥ÎØ∏ÏßÄ ÎπÑÍµê ÏÑπÏÖò (ÏÇ¨ÏßÑ ÏïÑÎûò ÎîîÎ∞îÏù¥Îçî Ìè¨Ìï®)
                        InteractiveBeforeAfterView(
                            imagePath: filterDetail.files.first ?? "",
                            filterValues: filterDetail.filterValues
                        )
                        .frame(height: 400)
                        .padding(.top, 40)
                        
                        // ÌïÑÌÑ∞ Ï†ïÎ≥¥ÏôÄ ÌÜµÍ≥Ñ
                        FilterInfoWithStatsSection(filterDetail: filterDetail)
                        
                        // ÏÇ¨ÏßÑ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑπÏÖò (ÏúÑÏπò Ï†ïÎ≥¥ Ìè¨Ìï®)
                        PhotoMetadataWithLocationSection(metadata: filterDetail.photoMetadata)
                        
                        // ÌïÑÌÑ∞ ÌîÑÎ¶¨ÏÖã ÏÑπÏÖò (Í≤∞Ï†ú ÏÉÅÌÉúÏóê Îî∞Îùº Îã§Î•¥Í≤å ÌëúÏãú)
                        FilterPresetsSection(
                            filterValues: filterDetail.filterValues,
                            isPurchased: filterDetail.is_downloaded
                        )
                        
                        // Í≤∞Ï†ú/Îã§Ïö¥Î°úÎìú Î≤ÑÌäº - Í≤∞Ï†ú Ï≤òÎ¶¨ Î°úÏßÅ Ïó∞Í≤∞
                        PurchaseDownloadButton(
                            price: filterDetail.price,
                            isPurchased: filterDetail.is_downloaded,
                            isPurchasing: viewModel.isPurchasing, // Í≤∞Ï†ú Ï§ë ÏÉÅÌÉú Ï∂îÍ∞Ä
                            onPurchase: {
                                // Í≤∞Ï†ú Ï≤òÎ¶¨ Î°úÏßÅ - ViewModelÏóê Ïã†Ìò∏ Ï†ÑÎã¨
                                print("üîµ FilterDetailView: Í≤∞Ï†ú Î≤ÑÌäº ÌÉ≠ - \(filterId)")
                                viewModel.input.purchaseFilter.send(filterId)
                            }
                        )
                        
                        // ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ ÌîÑÎ°úÌïÑ ÏÑπÏÖò (Ï±ÑÌåÖ Î≤ÑÌäº Ìè¨Ìï®)
                        CreatorProfileWithChatSection(
                            creator: filterDetail.creator,
                            onChatTap: {
                                showChatOuterView = true
                            }
                        )
                        
                        // ÌïòÎã® Ïó¨Î∞±
                        Color.clear.frame(height: 100)
                    }
                }
            } else if viewModel.isLoading {
                LoadingIndicatorView()
            } else if let errorMessage = viewModel.errorMessage {
                ErrorStateView(errorMessage: errorMessage) {
                    viewModel.input.loadFilterDetail.send(filterId)
                }
            }
            
            // ÏÑ±Í≥µ/ÏóêÎü¨ Î©îÏãúÏßÄ ÌÜ†Ïä§Ìä∏ (ÏÉÅÎã®Ïóê ÌëúÏãú)
            if let errorMessage = viewModel.errorMessage, !viewModel.isLoading {
                VStack {
                    ToastMessageView(
                        message: errorMessage,
                        isSuccess: errorMessage.contains("ÏôÑÎ£å")
                    )
                    .padding(.top, 10) // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÏïÑÎûòÏóê ÌëúÏãú
                    .padding(.horizontal, 20)
                    
                    Spacer()
                }
                .zIndex(1000) // Îã§Î•∏ Î∑∞Îì§ ÏúÑÏóê ÌëúÏãú
            }
        }
        .navigationBarHidden(false)
        .navigationBarBackButtonHidden(true)
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            // Ïª§Ïä§ÌÖÄ Î∞±Î≤ÑÌäº
            ToolbarItem(placement: .navigationBarLeading) {
                Button {
                    dismiss()
                } label: {
                    Image(systemName: "chevron.left")
                        .font(.system(size: 18, weight: .medium))
                        .foregroundColor(DesignSystem.Colors.Gray.gray75)
                }
            }
            
            // Ïª§Ïä§ÌÖÄ ÌÉÄÏù¥ÌãÄ
            ToolbarItem(placement: .principal) {
                if let filterDetail = viewModel.filterDetail {
                    Text(filterDetail.title)
                        .font(.hakgyoansim(size: 18, weight: .bold))
                        .foregroundColor(.white)
                        .lineLimit(1)
                } else {
                    Text("")
                        .font(.hakgyoansim(size: 18, weight: .bold))
                        .foregroundColor(.white)
                }
            }
            
            // Ï¢ãÏïÑÏöî Î≤ÑÌäº (Ïö∞ÏÉÅÎã®ÏúºÎ°ú Ïù¥Îèô)
            ToolbarItem(placement: .navigationBarTrailing) {
                if let filterDetail = viewModel.filterDetail {
                    Button {
                        viewModel.input.likeFilter.send((filterId, !filterDetail.is_liked))
                    } label: {
                        Image(systemName: filterDetail.is_liked ? "heart.fill" : "heart")
                            .font(.system(size: 18, weight: .medium))
                            .foregroundColor(filterDetail.is_liked ? .red : DesignSystem.Colors.Gray.gray75)
                    }
                } else {
                    Image(systemName: "heart")
                        .font(.system(size: 18, weight: .medium))
                        .foregroundColor(DesignSystem.Colors.Gray.gray75)
                }
            }
        }
        .onAppear {
            if !hasAppeared {
                hasAppeared = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    viewModel.input.loadFilterDetail.send(filterId)
                }
            }
        }
        .sheet(isPresented: $showChatOuterView) {
            // Ï±ÑÌåÖ Î∑∞ (Ìñ•ÌõÑ Íµ¨ÌòÑ)
            NavigationStack {
                VStack {
                    Text("Ï±ÑÌåÖ Í∏∞Îä•")
                        .font(.title)
                        .foregroundColor(.white)
                    Text("Í≥ß Ï∂úÏãúÎê©ÎãàÎã§!")
                        .foregroundColor(.gray)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
                .background(Color.black)
                .navigationTitle("Ï±ÑÌåÖ")
                .navigationBarTitleDisplayMode(.inline)
                .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button("Îã´Í∏∞") {
                            showChatOuterView = false
                        }
                        .foregroundColor(.white)
                    }
                }
            }
        }
    }
}

// MARK: - ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ Î∑∞ Ï∂îÍ∞Ä
struct ToastMessageView: View {
    let message: String
    let isSuccess: Bool
    @State private var isVisible = true
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: isSuccess ? "checkmark.circle.fill" : "exclamationmark.triangle.fill")
                .foregroundColor(isSuccess ? .green : .red)
                .font(.system(size: 20))
            
            Text(message)
                .font(.pretendard(size: 14, weight: .medium))
                .foregroundColor(.white)
                .lineLimit(2)
            
            Spacer()
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Color.black.opacity(0.9))
                .shadow(color: .black.opacity(0.3), radius: 8, x: 0, y: 4)
        )
        .scaleEffect(isVisible ? 1.0 : 0.8)
        .opacity(isVisible ? 1.0 : 0.0)
        .animation(.easeInOut(duration: 0.3), value: isVisible)
        .onAppear {
            // 3Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú ÏÇ¨ÎùºÏßÄÎäî Ïï†ÎãàÎ©îÏù¥ÏÖò
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.7) {
                withAnimation(.easeInOut(duration: 0.3)) {
                    isVisible = false
                }
            }
        }
    }
}

// MARK: - Í∏∞Ï°¥ Í≤∞Ï†ú/Îã§Ïö¥Î°úÎìú Î≤ÑÌäº ÏóÖÎç∞Ïù¥Ìä∏
struct PurchaseDownloadButton: View {
    let price: Int
    let isPurchased: Bool
    let isPurchasing: Bool // Í≤∞Ï†ú Ï§ë ÏÉÅÌÉú Ï∂îÍ∞Ä
    let onPurchase: () -> Void
    
    var body: some View {
        Button {
            if !isPurchased && !isPurchasing {
                onPurchase()
            }
        } label: {
            HStack {
                if isPurchasing {
                    // Í≤∞Ï†ú Ï§ë ÏÉÅÌÉú
                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        .scaleEffect(0.8)
                    Text("Í≤∞Ï†ú Ï§ë...")
                        .font(.pretendard(size: 16, weight: .semiBold))
                        .foregroundColor(.white)
                } else if isPurchased {
                    // Íµ¨Îß§ ÏôÑÎ£å ÏÉÅÌÉú
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.green)
                    Text("Íµ¨Îß§ÏôÑÎ£å")
                        .font(.pretendard(size: 16, weight: .semiBold))
                        .foregroundColor(.white)
                } else {
                    // Í≤∞Ï†ú Ï†Ñ ÏÉÅÌÉú
                    Text("‚Ç©\(formatPrice(price)) Í≤∞Ï†úÌïòÍ∏∞")
                        .font(.pretendard(size: 16, weight: .semiBold))
                        .foregroundColor(.white)
                }
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 16)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(buttonBackgroundColor)
            )
        }
        .disabled(isPurchased || isPurchasing)
        .padding(.horizontal, 20)
    }
    
    private var buttonBackgroundColor: Color {
        if isPurchasing {
            return Color.gray.opacity(0.6)
        } else if isPurchased {
            return Color.green.opacity(0.2)
        } else {
            return DesignSystem.Colors.Brand.brightTurquoise
        }
    }
    
    private func formatPrice(_ price: Int) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        return formatter.string(from: NSNumber(value: price)) ?? "\(price)"
    }
}

// MARK: - ÎÇòÎ®∏ÏßÄ Í∏∞Ï°¥ Ïª¥Ìè¨ÎÑåÌä∏Îì§ÏùÄ ÎèôÏùºÌïòÍ≤å Ïú†ÏßÄ...

// MARK: - ÎìúÎûòÍ∑∏ Í∞ÄÎä•Ìïú Before/After Ïù¥ÎØ∏ÏßÄ ÎπÑÍµê Î∑∞
struct InteractiveBeforeAfterView: View {
    let imagePath: String
    let filterValues: FilterValues
    @State private var dividerPosition: CGFloat = 0.5
    @State private var isDragging: Bool = false
    
    var body: some View {
        VStack(spacing: 16) {
            // Î©îÏù∏ Ïù¥ÎØ∏ÏßÄ ÏòÅÏó≠
            GeometryReader { geometry in
                ZStack {
                    // Before Ïù¥ÎØ∏ÏßÄ (ÏõêÎ≥∏) - Ï†ÑÏ≤¥ Ïù¥ÎØ∏ÏßÄ
                    if !imagePath.isEmpty {
                        AuthenticatedImageView(
                            imagePath: imagePath,
                            contentMode: .fill
                        ) {
                            Rectangle()
                                .fill(Color.gray.opacity(0.3))
                                .overlay(
                                    ProgressView()
                                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                )
                        }
                        .frame(width: geometry.size.width, height: geometry.size.height)
                        .clipped()
                        .cornerRadius(16)
                    }
                    
                    // After Ïù¥ÎØ∏ÏßÄ (ÌïÑÌÑ∞ Ï†ÅÏö©) - ÎîîÎ∞îÏù¥Îçî ÏúÑÏπòÏóê Îî∞Îùº ÌëúÏãú
                    if !imagePath.isEmpty {
                        AuthenticatedImageView(
                            imagePath: imagePath,
                            contentMode: .fill
                        ) {
                            Rectangle()
                                .fill(Color.gray.opacity(0.3))
                        }
                        .frame(width: geometry.size.width, height: geometry.size.height)
                        .clipped()
                        .overlay(
                            LinearGradient(
                                gradient: Gradient(colors: [
                                    Color.blue.opacity(0.2 + filterValues.saturation * 0.15),
                                    Color.cyan.opacity(0.1 + filterValues.contrast * 0.1)
                                ]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                            .blendMode(.multiply)
                        )
                        .brightness(filterValues.brightness * 0.3)
                        .contrast(1 + filterValues.contrast * 0.5)
                        .saturation(1 + filterValues.saturation)
                        .mask(
                            Rectangle()
                                .frame(width: geometry.size.width * dividerPosition, height: geometry.size.height)
                                .position(x: geometry.size.width * dividerPosition / 2, y: geometry.size.height / 2)
                        )
                        .cornerRadius(16)
                    }
                }
            }
            .frame(height: 400)
            
            // ÌÜµÌï©Îêú ÎîîÎ∞îÏù¥Îçî Ïª®Ìä∏Î°§
            ConnectedControlView(
                dividerPosition: $dividerPosition,
                isDragging: $isDragging
            )
            .padding(.bottom, 20)
        }
        .padding(.horizontal, 20)
    }
}

// MARK: - Ïó∞Í≤∞Îêú Ïª®Ìä∏Î°§ Î∑∞ (After-Divider-Before ÌÜµÌï©)
struct ConnectedControlView: View {
    @Binding var dividerPosition: CGFloat
    @Binding var isDragging: Bool
    @State private var dragOffset: CGFloat = 0
    
    var body: some View {
        GeometryReader { geometry in
            // ÌÜµÌï©Îêú After-Divider-Before Î∑∞
            HStack(spacing: 0) {
                // After Î≤ÑÌäº
                Text("After")
                    .font(.pretendard(size: 12, weight: .medium))
                    .foregroundColor(.white)
                    .frame(width: 60, height: 24)
                    .background(
                        Capsule()
                            .fill(DesignSystem.Colors.Gray.gray60.opacity(0.7))
                    )
                
                // ÎîîÎ∞îÏù¥Îçî Î≤ÑÌäº
                Button {
                    // ÌÉ≠ÌïòÎ©¥ Ï§ëÏïôÏúºÎ°ú Î¶¨ÏÖã
                    withAnimation(.easeInOut(duration: 0.3)) {
                        dividerPosition = 0.5
                    }
                } label: {
                    Image("DivideButton")
                        .renderingMode(.template)
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                        .background(
                            Capsule()
                                .fill(DesignSystem.Colors.Gray.gray60)
                                .frame(width: 32, height: 32)
                        )
                        .scaleEffect(isDragging ? 1.1 : 1.0)
                        .animation(.easeInOut(duration: 0.1), value: isDragging)
                }
                .buttonStyle(PlainButtonStyle())
                
                // Before Î≤ÑÌäº
                Text("Before")
                    .font(.pretendard(size: 12, weight: .medium))
                    .foregroundColor(.white)
                    .frame(width: 60, height: 24)
                    .background(
                        Capsule()
                            .fill(DesignSystem.Colors.Gray.gray60.opacity(0.7))
                    )
            }
            .offset(x: dragOffset)
            .frame(maxWidth: .infinity)
            .gesture(
                DragGesture()
                    .onChanged { value in
                        isDragging = true
                        
                        // Ïä¨ÎùºÏù¥Îìú ÏòÅÏó≠ Ï§ëÏïô Í∏∞Ï§ÄÏúºÎ°ú ÏÉÅÎåÄ ÏúÑÏπò Í≥ÑÏÇ∞
                        let trackWidth = geometry.size.width - 40
                        let relativeX = value.location.x - (trackWidth / 2)
                        
                        // Ïä¨ÎùºÏù¥Îìú Î≤îÏúÑ Ï†úÌïú (¬± (trackWidth - Î≤ÑÌäº Ï†ÑÏ≤¥ ÎÑàÎπÑ) / 2)
                        let buttonGroupWidth: CGFloat = 60 + 32 + 60 // After + Divider + Before
                        let maxOffset = (trackWidth - buttonGroupWidth) / 2
                        dragOffset = max(-maxOffset, min(maxOffset, relativeX))
                        
                        // dragOffsetÏùÑ dividerPositionÏúºÎ°ú Î≥ÄÌôò (0.0 ~ 1.0)
                        let normalizedPosition = (dragOffset + maxOffset) / (maxOffset * 2)
                        dividerPosition = normalizedPosition
                    }
                    .onEnded { _ in
                        isDragging = false
                    }
            )
        }
        .frame(height: 40)
        .onAppear {
            // Ï¥àÍ∏∞ dragOffset ÏÑ§Ï†ïÏùÑ dividerPosition 0.5 (Ï§ëÏïô)ÏôÄ ÎèôÍ∏∞Ìôî
            let trackWidth = (UIScreen.main.bounds.width - 40) - 40
            let buttonGroupWidth: CGFloat = 60 + 32 + 60
            let maxOffset = (trackWidth - buttonGroupWidth) / 2
            dragOffset = (0.5 * (maxOffset * 2)) - maxOffset // Start at center
        }
        .compatibleOnChange(of: dividerPosition) { newValue in
            if !isDragging {
                withAnimation(.easeInOut(duration: 0.3)) {
                    let trackWidth = (UIScreen.main.bounds.width - 40) - 40
                    let buttonGroupWidth: CGFloat = 60 + 32 + 60
                    let maxOffset = (trackWidth - buttonGroupWidth) / 2
                    dragOffset = (newValue * (maxOffset * 2)) - maxOffset
                }
            }
        }
    }
}

// MARK: - ÌïÑÌÑ∞ Ï†ïÎ≥¥ÏôÄ ÌÜµÍ≥Ñ ÏÑπÏÖò
struct FilterInfoWithStatsSection: View {
    let filterDetail: FilterDetailResponse
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                VStack(alignment: .leading, spacing: 8) {
                    Text(filterDetail.title)
                        .font(.hakgyoansim(size: 24, weight: .bold))
                        .foregroundColor(.white)
                    
                    Text("#\(filterDetail.category)")
                        .font(.pretendard(size: 14, weight: .medium))
                        .foregroundColor(DesignSystem.Colors.Brand.brightTurquoise)
                }
                
                Spacer()
                
                Text("‚Ç©\(formatPrice(filterDetail.price))")
                    .font(.hakgyoansim(size: 24, weight: .bold))
                    .foregroundColor(.white)
            }
            
            Text(filterDetail.description)
                .font(.pretendard(size: 16, weight: .regular))
                .foregroundColor(.white.opacity(0.8))
                .lineLimit(nil)
            
            // ÌÜµÍ≥Ñ Ï†ïÎ≥¥
            HStack(spacing: 24) {
                VStack(alignment: .leading, spacing: 4) {
                    Text("Îã§Ïö¥Î°úÎìú")
                        .font(.pretendard(size: 12, weight: .medium))
                        .foregroundColor(.gray)
                    Text("\(filterDetail.buyer_count)+")
                        .font(.pretendard(size: 18, weight: .bold))
                        .foregroundColor(.white)
                }
                .padding(.horizontal, 16)
                .padding(.vertical, 12)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.gray.opacity(0.15))
                )
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("Ï¢ãÏïÑÏöî")
                        .font(.pretendard(size: 12, weight: .medium))
                        .foregroundColor(.gray)
                    Text("\(filterDetail.like_count)")
                        .font(.pretendard(size: 18, weight: .bold))
                        .foregroundColor(.white)
                }
                .padding(.horizontal, 16)
                .padding(.vertical, 12)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.gray.opacity(0.15))
                )
                
                Spacer()
            }
        }
        .padding(.horizontal, 20)
    }
    
    private func formatPrice(_ price: Int) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        return formatter.string(from: NSNumber(value: price)) ?? "\(price)"
    }
}

// MARK: - ÏúÑÏπò Ï†ïÎ≥¥ Ìè¨Ìï® Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑπÏÖò
struct PhotoMetadataWithLocationSection: View {
    let metadata: PhotoMetadata
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Ï¥¨ÏòÅ Ï†ïÎ≥¥")
                .font(.pretendard(size: 18, weight: .semiBold))
                .foregroundColor(.white)
            
            // Í∏∞Í∏∞ Ï†ïÎ≥¥
            VStack(alignment: .leading, spacing: 8) {
                HStack {
                    Text(metadata.camera)
                        .font(.pretendard(size: 14, weight: .medium))
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Text("EXIF")
                        .font(.pretendard(size: 12, weight: .medium))
                        .foregroundColor(.gray)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(
                            RoundedRectangle(cornerRadius: 4)
                                .stroke(Color.gray, lineWidth: 1)
                        )
                }
                
                Text("\(metadata.lens_info) ¬∑ \(metadata.focal_length) mm f/\(metadata.aperture) ISO \(metadata.iso)")
                    .font(.pretendard(size: 12, weight: .regular))
                    .foregroundColor(.gray)
                
                Text("\(metadata.pixel_width) √ó \(metadata.pixel_height) ¬∑ \(metadata.formattedFileSize)")
                    .font(.pretendard(size: 12, weight: .regular))
                    .foregroundColor(.gray)
            }
            .padding(16)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color.gray.opacity(0.1))
            )
            
            // ÏúÑÏπò Ï†ïÎ≥¥ (ÏûàÏùÑ ÎïåÎßå ÌëúÏãú)
            if metadata.hasLocation {
                HStack(spacing: 12) {
                    // ÎØ∏Îãà ÏßÄÎèÑ ÌëúÏãú
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.gray.opacity(0.3))
                        .frame(width: 60, height: 60)
                        .overlay(
                            Image(systemName: "map.fill")
                                .foregroundColor(DesignSystem.Colors.Brand.brightTurquoise)
                                .font(.system(size: 24))
                        )
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("ÏúÑÏπò")
                            .font(.pretendard(size: 12, weight: .medium))
                            .foregroundColor(.gray)
                        
                        Text("ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÏÑ†Ïú†Î°ú 9Í∏∏ 30")
                            .font(.pretendard(size: 14, weight: .medium))
                            .foregroundColor(.white)
                            .lineLimit(2)
                        
                        if let lat = metadata.latitude, let lon = metadata.longitude {
                            Text("ÏúÑÎèÑ: \(String(format: "%.6f", lat)), Í≤ΩÎèÑ: \(String(format: "%.6f", lon))")
                                .font(.pretendard(size: 10, weight: .regular))
                                .foregroundColor(.gray)
                        }
                    }
                    
                    Spacer()
                }
                .padding(16)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(Color.gray.opacity(0.1))
                )
            } else {
                // ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Îïå
                HStack(spacing: 12) {
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.gray.opacity(0.3))
                        .frame(width: 60, height: 60)
                        .overlay(
                            Image(systemName: "location.slash")
                                .foregroundColor(.gray)
                                .font(.system(size: 24))
                        )
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("ÏúÑÏπò")
                            .font(.pretendard(size: 12, weight: .medium))
                            .foregroundColor(.gray)
                        
                        Text("ÏúÑÏπò Ï†ïÎ≥¥ ÏóÜÏùå")
                            .font(.pretendard(size: 14, weight: .medium))
                            .foregroundColor(.gray)
                    }
                    
                    Spacer()
                }
                .padding(16)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(Color.gray.opacity(0.1))
                )
            }
        }
        .padding(.horizontal, 20)
    }
}

// MARK: - ÌïÑÌÑ∞ ÌîÑÎ¶¨ÏÖã ÏÑπÏÖò
struct FilterPresetsSection: View {
    let filterValues: FilterValues
    let isPurchased: Bool
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Filter Presets")
                    .font(.pretendard(size: 18, weight: .semiBold))
                    .foregroundColor(.white)
                
                Spacer()
                
                Text("LUT")
                    .font(.pretendard(size: 12, weight: .medium))
                    .foregroundColor(.gray)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(
                        RoundedRectangle(cornerRadius: 4)
                            .stroke(Color.gray, lineWidth: 1)
                    )
            }
            
            if isPurchased {
                // Í≤∞Ï†ú ÏôÑÎ£å Ïãú: Î∞∞Í≤Ω ÏóÜÏù¥ ÏïÑÏù¥ÏΩòÎßå gray0ÏúºÎ°ú ÌëúÏãú
                LazyVGrid(columns: [
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible())
                ], spacing: 16) {
                    FilterPresetItem(iconName: "sun.max", value: filterValues.brightness, title: "Î∞ùÍ∏∞", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "camera.aperture", value: filterValues.exposure, title: "ÎÖ∏Ï∂ú", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "circle.lefthalf.filled", value: filterValues.contrast, title: "ÎåÄÎπÑ", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "paintpalette", value: filterValues.saturation, title: "Ï±ÑÎèÑ", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "camera.filters", value: filterValues.sharpness, title: "ÏÑ†Î™ÖÎèÑ", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "circle.grid.cross", value: filterValues.vignette, title: "ÎπÑÎÑ§ÌåÖ", formatType: .decimal, isPurchased: true)
                    
                    FilterPresetItem(iconName: "aqi.medium", value: filterValues.blur, title: "Î∏îÎü¨", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "waveform", value: filterValues.noise_reduction, title: "ÎÖ∏Ïù¥Ï¶à", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "sun.min", value: filterValues.highlights, title: "ÌïòÏù¥ÎùºÏù¥Ìä∏", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "moon", value: filterValues.shadows, title: "ÏÑÄÎèÑÏö∞", formatType: .decimal, isPurchased: true)
                    FilterPresetItem(iconName: "thermometer", value: filterValues.temperature, title: "ÏÉâÏò®ÎèÑ", formatType: .temperature, isPurchased: true)
                    FilterPresetItem(iconName: "circle.fill", value: filterValues.black_point, title: "Î∏îÎûôÌè¨Ïù∏Ìä∏", formatType: .decimal, isPurchased: true)
                }
                .padding(.vertical, 20)
            } else {
                // Í≤∞Ï†ú Ï†Ñ: Î∏îÎü¨ Ï≤òÎ¶¨Îêú ÏÉÅÌÉú
                LazyVGrid(columns: [
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible())
                ], spacing: 16) {
                    let presetIcons = ["sun.max", "camera.aperture", "circle.lefthalf.filled", "paintpalette", "camera.filters", "circle.grid.cross", "aqi.medium", "waveform", "sun.min", "moon", "thermometer", "circle.fill"]
                    
                    ForEach(Array(presetIcons.enumerated()), id: \.offset) { index, iconName in
                        VStack(spacing: 8) {
                            ZStack {
                                Circle()
                                    .fill(Color.gray.opacity(0.3))
                                    .frame(width: 40, height: 40)
                                
                                Image(systemName: iconName)
                                    .foregroundColor(.gray)
                                    .font(.system(size: 16))
                            }
                            
                            Text("0.0")
                                .font(.pretendard(size: 12, weight: .medium))
                                .foregroundColor(.gray)
                        }
                    }
                }
                .padding(20)
                .background(
                    RoundedRectangle(cornerRadius: 16)
                        .fill(Color.gray.opacity(0.1))
                )
                .blur(radius: 6)
                .overlay(
                    VStack(spacing: 16) {
                        Image(systemName: "lock.fill")
                            .font(.system(size: 32))
                            .foregroundColor(.white)
                        
                        Text("Í≤∞Ï†úÍ∞Ä ÌïÑÏöîÌïú Ïú†Î£å ÌïÑÌÑ∞ÏûÖÎãàÎã§")
                            .font(.pretendard(size: 16, weight: .semiBold))
                            .foregroundColor(.white)
                            .multilineTextAlignment(.center)
                    }
                    .padding(20)
                    .background(
                        RoundedRectangle(cornerRadius: 16)
                            .fill(Color.black.opacity(0.8))
                    )
                )
            }
        }
        .padding(.horizontal, 20)
    }
}

// MARK: - ÌïÑÌÑ∞ ÌîÑÎ¶¨ÏÖã ÏïÑÏù¥ÌÖú
struct FilterPresetItem: View {
    let iconName: String
    let value: Double
    let title: String
    let formatType: ValueFormatType
    let isPurchased: Bool
    
    enum ValueFormatType {
        case decimal
        case temperature
    }
    
    init(iconName: String, value: Double, title: String, formatType: ValueFormatType, isPurchased: Bool = false) {
        self.iconName = iconName
        self.value = value
        self.title = title
        self.formatType = formatType
        self.isPurchased = isPurchased
    }
    
    var body: some View {
        VStack(spacing: 8) {
            if isPurchased {
                // Í≤∞Ï†ú ÏôÑÎ£å Ïãú: Î∞∞Í≤Ω ÏóÜÏù¥ gray0 ÏïÑÏù¥ÏΩòÎßå ÌëúÏãú
                Image(systemName: iconName)
                    .foregroundColor(DesignSystem.Colors.Gray.gray0)
                    .font(.system(size: 24, weight: .medium))
                    .frame(width: 40, height: 40)
            } else {
                // Í≤∞Ï†ú Ï†Ñ: Í∏∞Ï°¥ Ïä§ÌÉÄÏùº Ïú†ÏßÄ
                ZStack {
                    Circle()
                        .fill(Color.gray.opacity(0.2))
                        .frame(width: 40, height: 40)
                    
                    Image(systemName: iconName)
                        .foregroundColor(.white)
                        .font(.system(size: 16))
                }
            }
            
            Text(formattedValue)
                .font(.pretendard(size: 12, weight: .medium))
                .foregroundColor(isPurchased ? DesignSystem.Colors.Gray.gray0 : .white)
        }
    }
    
    private var formattedValue: String {
        switch formatType {
        case .decimal:
            return String(format: "%.1f", value)
        case .temperature:
            return String(format: "%.0fK", value)
        }
    }
}

// MARK: - Ï±ÑÌåÖ Î≤ÑÌäºÏù¥ ÏûàÎäî ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞ ÌîÑÎ°úÌïÑ ÏÑπÏÖò
struct CreatorProfileWithChatSection: View {
    let creator: CreatorInfo
    let onChatTap: () -> Void
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞")
                    .font(.pretendard(size: 18, weight: .semiBold))
                    .foregroundColor(.white)
                
                Spacer()
                
                Button {
                    onChatTap()
                } label: {
                    Image(systemName: "paperplane.fill")
                        .font(.system(size: 18))
                        .foregroundColor(DesignSystem.Colors.Brand.brightTurquoise)
                }
            }
            
            HStack(spacing: 12) {
                // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
                if let profileImagePath = creator.profileImage {
                    AuthenticatedImageView(
                        imagePath: profileImagePath,
                        contentMode: .fill
                    ) {
                        Circle()
                            .fill(Color.gray.opacity(0.3))
                    }
                    .frame(width: 60, height: 60)
                    .clipShape(Circle())
                } else {
                    Circle()
                        .fill(Color.gray.opacity(0.3))
                        .frame(width: 60, height: 60)
                        .overlay(
                            Image(systemName: "person.fill")
                                .foregroundColor(.gray)
                        )
                }
                
                VStack(alignment: .leading, spacing: 6) {
                    Text(creator.name)
                        .font(.pretendard(size: 18, weight: .semiBold))
                        .foregroundColor(.white)
                    
                    Text(creator.nick)
                        .font(.pretendard(size: 14, weight: .medium))
                        .foregroundColor(.gray)
                    
                    Text(creator.introduction)
                        .font(.pretendard(size: 13, weight: .regular))
                        .foregroundColor(.white.opacity(0.8))
                        .lineLimit(2)
                }
                
                Spacer()
            }
            
            // Ìï¥ÏãúÌÉúÍ∑∏
            if !creator.hashTags.isEmpty {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 8) {
                        ForEach(creator.hashTags, id: \.self) { tag in
                            Text(tag)
                                .font(.pretendard(size: 12, weight: .medium))
                                .foregroundColor(.white)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(Color.black)
                                .cornerRadius(16)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 16)
                                        .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                                )
                        }
                    }
                    .padding(.horizontal, 20)
                }
                .padding(.horizontal, -20)
            }
            
            // ÏûëÍ∞Ä ÏÜåÍ∞ú ÌÖçÏä§Ìä∏
            VStack(alignment: .leading, spacing: 8) {
                Text("ÎπõÏù¥ Ïù¥ÎÅÑÎäî ÏÑ¨ÏÑ∏Ìïú ÏÑ∏Í≥Ñ")
                    .font(.pretendard(size: 16, weight: .semiBold))
                    .foregroundColor(.white)
                
                Text("ÎßëÍ≥† Ìà¨Î™ÖÌïú ÎπõÏùÑ Îã¥ÏùÄ ÏûêÏó∞ Í∞êÏÑ± ÌïÑÌÑ∞ÏûÖÎãàÎã§.\nÎÑàÎ¨¥ Í≥ºÌïòÏßÄ ÏïäÏúºÎ©¥ÏÑúÎèÑ Î∂ÑÎ™ÖÌïú Í∞êÏ†ïÏùÑ Ïã§Ïñ¥Î≥¥ÏÑ∏Ïöî.\nÏÉàÎ°úÏö¥ ÏãúÏÑ†, ÏàúÏàòÌïú Í∞êÏ†ïÏùÑ Îã¥ÏïÑÎÇ¥Îäî ÏÉàÏãπ ÌïÑÌÑ∞Î•º ÏÇ¨Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî.")
                    .font(.pretendard(size: 14, weight: .regular))
                    .foregroundColor(.white.opacity(0.8))
                    .lineSpacing(4)
            }
        }
        .padding(.horizontal, 20)
    }
}
